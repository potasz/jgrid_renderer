/* Configuration file for secure client */

import java.net.SocketPermission;
import java.security.Permission;
import net.jini.discovery.LookupDiscovery;
import net.jini.lookup.ServiceDiscoveryManager;
import net.jini.security.BasicProxyPreparer;

import net.jini.discovery.LookupDiscoveryManager;
import net.jini.discovery.DiscoveryGroupManagement;
import net.jini.core.discovery.LookupLocator;

import com.sun.security.auth.callback.DialogCallbackHandler;
import com.sun.security.auth.callback.TextCallbackHandler;

import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.tcp.TcpServerEndpoint; 


/* Configuration block for the SDM */
net.jini.lookup.ServiceDiscoveryManager {

	//registrarPreparer = net.jini.discovery.LookupDiscovery.registrarPreparer;

    // Configure lookup groups and locators where the client can discover services
	discoveryManager = new LookupDiscoveryManager(
		new String[]{"${client.lookup.group}"}, //DiscoveryGroupManagement.ALL_GROUPS,
		new LookupLocator[] {
			//new LookupLocator("jini://lookup_host:4160")
		},
		null,
		this);// Using default JoinManager settings.

	eventListenerExporter = new BasicJeriExporter( TcpServerEndpoint.getInstance("${jgrid.localhost}", Integer.parseInt("${export.client.event.port}")),
                        new BasicILFactory(),
                        false, false);  

}// end net.jini.lookup.ServiceDiscoveryManager

	
// ComputeServiceFactory specific configuration entries
hu.vein.irt.jgrid.compute.ComputeServiceFactory {
	tcpEndpoint = TcpServerEndpoint.getInstance("${jgrid.localhost}", Integer.parseInt("${export.client.port}"));
	
	serviceExporter = new BasicJeriExporter(
			tcpEndpoint,
		new BasicILFactory());
}

// ComputeService specific configuration entries
hu.vein.irt.jgrid.ComputeServiceImpl {
	
	//############## THREADPOOL SETTINGS ##########################	
	
	// Minimum size of the thread-pool
	minPoolSize = 1;
	// Maximum size of the thread-pool
	maxPoolSize = 10;

	// After this time idle threads will die
	threadKeepAliveTime = 60000;

	// Default priority of the compute worker threads
	workerThreadPriority = 4;

	//############## INTER SERVICE COMMUNICATION ##################
	
	// The hostname or IP address for MPI inter ComputeService communication
	communicationHost = new String("${jgrid.localhost}");
	// The port number for the MPI inter ComputeService communication
	communicationPort = 44455; 

	// Default factory class for the task address generation within the MPI context
	addressFactoryClass = "hu.elte.jgrid.comm.mpiimpl.MPITaskAddressFactory";
    
    // Default communication type for spawned objects. Possible values: rmi, ibis.
    spawnCommunication = "rmi";

    // Default communication type for MPI. Possible values: jgrid, ibis.
    mpiCommunication = "ibis";

	//############### SERVICE MONITORING ##########################

	// Default refresh interval of the internal monitoring thread in milliseconds
	monitoringFrequency = 3000;
	
	//############### APPLICATION LEVEL MONITORING ################

	// Output directory of the application level monitoring trace files
	monitorOutputDir = "trace";
	// The hostname that identifies the current machine and that is used in the
	// monitoring entries within the trace file 
	monitorHostname = new String("${jgrid.localhost}");
	// The treshold number after which the application level monitoring entries will be
	// written out to the trace file. If this number is 1 then each entry will be
	// immediately written out.
	monitorBufferSize = 1;
	// The port number for the trace file server
	streamPort = 44456;

	//############### SECURITY ###################################
	
	// If true than activates the ComputeService specific security controls
	runSecure = "false";
	// The access control file for the ComputeService. Only has an effect when runs in secure mode.
	accessConfigFile = "config${/}common${/}access.config";
	// The access control log file
	accessLogFile = "log${/}access.log";

	//############### LEASE SETTINGS #############################

	// The maximum lease duration that the service can grant in millis.
	maximumLease = Integer.MAX_VALUE; // never expires
	// The default lease duration in millis.
	defaultLease = Integer.MAX_VALUE; // never expires
}