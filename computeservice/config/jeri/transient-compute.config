import net.jini.discovery.LookupDiscovery;

// Security settings
import net.jini.jeri.BasicJeriExporter;
import jgrid.core.security.jeri.JGridILFactory;
import net.jini.jeri.tcp.TcpServerEndpoint;
import net.jini.jeri.ssl.SslServerEndpoint;
import net.jini.jeri.BasicILFactory;
import net.jini.security.BasicProxyPreparer;

import net.jini.core.entry.Entry;
import net.jini.lookup.entry.*;
import jgrid.core.entry.ServiceLocation;

import net.jini.discovery.LookupDiscoveryManager;
import net.jini.discovery.DiscoveryGroupManagement;
import net.jini.core.discovery.LookupLocator;

import jgrid.comp.entry.*;
import jgrid.core.entry.*;

import net.jini.lookup.entry.UIDescriptor;
import net.jini.lookup.ui.MainUI;
import net.jini.lookup.ui.AdminUI;
import net.jini.lookup.ui.factory.JFrameFactory;

import java.rmi.MarshalledObject;
import java.util.Collections;
import net.jini.lookup.ui.attribute.UIFactoryTypes;

import net.jini.core.constraint.*;
import net.jini.constraint.*;

import java.io.FileInputStream;

import net.jini.id.UuidFactory;

import javax.security.auth.login.LoginContext;

import java.net.SocketPermission;
import java.security.Permission;
import net.jini.security.AuthenticationPermission;
import hu.vein.irt.jgrid.compute.common.ComputePermission;

import net.jini.core.lookup.ServiceTemplate;

import javax.net.ServerSocketFactory;

// Block for configuring basic sevice properties like server endpoint, attributes, etc.
jgrid.core.ServiceX {

	tcpEndpoint = TcpServerEndpoint.getInstance("${jgrid.localhost}", Integer.parseInt("${export.compute.port}") );

	serverExporter = new BasicJeriExporter(
		tcpEndpoint,
		new BasicILFactory()
	);

    // Edit this attributes to reflect real values
	initialAttributes = new Entry[]{
		new Name("Compute Service"),
		new Address("Address", "Organisation", "Org Unit", "Locality", "State", "ZIP Code", "Country"),
		new Location("floor", "room number", "building"),
		new ServiceInfo("Compute Service", "JGrid Team, Veszprem, Hungary", "JGrid Team, Veszprem, Hungary", "1.3", "", ""),
		new CustomServiceType("hu.vein.irt.jgrid.compute.ComputeResources"),
		new Comment("Compute node [1.3] in the JGrid system."),
		new ComputeNode("your host name here", "${jgrid.localhost}"),
		new Processor(
			"Enter your processortype here",
			new Integer(1),
			new Integer(2400),
			new Integer(2400)
		)
	};

	serviceUIDescriptors = new Entry[] {
		new UIDescriptor(
			AdminUI.ROLE,
			JFrameFactory.TOOLKIT,
			Collections.singleton(
				new UIFactoryTypes(
					Collections.singleton(JFrameFactory.TYPE_NAME)
				)
			),
			new MarshalledObject(
				new jgrid.core.ui.BaseJFrameFactory(
					hu.vein.irt.jgrid.compute.ui.ComputeAdminJFrame.class
				)
			)
		)
	};

	static serviceImpl = new hu.vein.irt.jgrid.compute.ComputeServiceImpl();

	useLookupModule = new Boolean(false);
}

// ComputeService specific configuration entries
hu.vein.irt.jgrid.ComputeServiceImpl {
	
	//############## THREADPOOL SETTINGS ##########################	
	
	// Minimum size of the thread-pool
	minPoolSize = 1;
	// Maximum size of the thread-pool
	maxPoolSize = 10;

	// After this time idle threads will die
	threadKeepAliveTime = 60000;

	// Default priority of the compute worker threads
	workerThreadPriority = 4;

	//############## INTER SERVICE COMMUNICATION ##################
	
	// The hostname or IP address for MPI inter ComputeService communication
	communicationHost = new String("${jgrid.localhost}");
	// The port number for the MPI inter ComputeService communication
	communicationPort = 44445; 

	// Default factory class for the task address generation within the MPI context
	addressFactoryClass = "hu.elte.jgrid.comm.mpiimpl.MPITaskAddressFactory";
    
    // Default communication type for spawned objects. Possible values: rmi, ibis.
    spawnCommunication = "rmi";

    // Default communication type for MPI. Possible values: jgrid, ibis.
    mpiCommunication = "ibis";

	//############### SERVICE MONITORING ##########################

	// Default refresh interval of the internal monitoring thread in milliseconds
	monitoringFrequency = 3000;
	
	//############### APPLICATION LEVEL MONITORING ################

	// Output directory of the application level monitoring trace files
	monitorOutputDir = "trace";
	// The hostname that identifies the current machine and that is used in the
	// monitoring entries within the trace file 
	monitorHostname = new String("${jgrid.localhost}");
	// The treshold number after which the application level monitoring entries will be
	// written out to the trace file. If this number is 1 then each entry will be
	// immediately written out.
	monitorBufferSize = 1;
	// The port number for the trace file server
	streamPort = 44446;

	//############### SECURITY ###################################
	
	// If true than activates the ComputeService specific security controls
	runSecure = "false";
	// The access control file for the ComputeService. Only has an effect when runs in secure mode.
	accessConfigFile = "config${/}common${/}access.config";
	// The access control log file
	accessLogFile = "log${/}access.log";

	//############### LEASE SETTINGS #############################

	// The maximum lease duration that the service can grant in millis.
	maximumLease = 300000; // 5 minutes
	// The default lease duration in millis.
	defaultLease = 120000; // 2 minutes    
}

// JoinManager specific configuration entries

net.jini.lookup.JoinManager {

	// use DiscoveryGroupManagement.NO_GROUPS if you want your service to join no group discovery

	discoveryManager = new LookupDiscoveryManager(
		new String[] {"${jgrid.compute.group}"},   // multicast groups
		new LookupLocator[] { 
			//new LookupLocator("jini://lookup_host:4160")  // lookup locators
		},
		null,
		this
	);

	registrarPreparer = new BasicProxyPreparer(
		false,
		new Permission[] {
			new SocketPermission("*:1024-", "connect")
		}
	);
}
